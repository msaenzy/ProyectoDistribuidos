from flask import Flask, render_template
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.neighbors import LocalOutlierFactor

app = Flask(__name__)

# Ruta al archivo CSV
file_path = 'C:/Users/famil/Downloads/PROYECTODISTRIBUIDO/energia.csv'


# Cargar el archivo CSV en un DataFrame de Pandas
data = pd.read_csv(file_path, encoding='latin1')

@app.route('/')
def index():
    # Seleccionar una muestra aleatoria de 100 filas del DataFrame
    muestra_aleatoria = data.sample(n=100)

    # Crear un modelo de detección de anomalías
    lof = LocalOutlierFactor(contamination=0.1)

    # Entrenar el modelo con los datos de consumo de energía
    consumo = muestra_aleatoria[['CONSUMO_KWH_ENERO', 'CONSUMO_KWH_FEBRERO', 'CONSUMO_KWH_MARZO',
                                 'CONSUMO_KWH_ABRIL', 'CONSUMO_KWH_MAYO', 'CONSUMO_KWH_JUNIO',
                                 'CONSUMO_KWH_JULIO', 'CONSUMO_KWH_AGOSTO', 'CONSUMO_KWH_SEPTIEMBRE',
                                 'CONSUMO_KWH_OCTUBRE']]
    lof.fit(consumo)

    # Predecir las anomalías
    anomalies = lof.fit_predict(consumo)
    muestra_aleatoria['Anomalies'] = anomalies

    # Graficar el consumo de energía
    plt.figure(figsize=(12, 8))  # Reducir el tamaño del gráfico
    plt.bar(range(len(muestra_aleatoria)), muestra_aleatoria['CONSUMO_KWH_ENERO'], color='skyblue')
    plt.title('Consumo de energía en enero')
    plt.xlabel('Muestra')
    plt.ylabel('Consumo de energía (kWh)')
    plt.xticks(range(0, len(muestra_aleatoria), 5), muestra_aleatoria.index[::5], rotation=45)  # Ajustar las etiquetas del eje x
    plt.grid(True)

    # Marcar las anomalías
    for i, anomaly in enumerate(anomalies):
        if anomaly == -1:
            plt.annotate('Anomaly', xy=(i, muestra_aleatoria['CONSUMO_KWH_ENERO'].iloc[i]), xytext=(i, 0),
                         textcoords='offset points', arrowprops=dict(facecolor='red', shrink=0.05))

    # Guardar el gráfico como imagen
    plt.tight_layout()  # Ajustar el diseño del gráfico
    plt.savefig('static/consumo_energia_enero.png')

    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
